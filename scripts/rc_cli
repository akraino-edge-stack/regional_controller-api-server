#!/usr/bin/python3
#
# Copyright (c) 2019 AT&T Intellectual Property. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#  rc_cli - Command line interface to the Regional Controller.
#  usage: rc_cli [ -H host ] [ -u user ] [ -p passwd ] [ -Y ] object operation [ args ... ]
#     -H host (default localhost)
#     -u user (default admin)
#     -p passwd
#     -Y      (display YAML column in list views)
#

import sys
import argparse
import json
import yaml     # sudo pip install PyYAML
import RCClient

JSON   = RCClient.JSON
DASHES = '-' * 200
OBJS   = [ 'blueprint', 'edgesite', 'hardware', 'node', 'pod', 'region' ]
OPS    = [ 'create', 'delete', 'list', 'show' ]


def fwidth(map, name):
	w = 0
	for line in map:
		w = max(w, len(str(line.get(name, ''))))
	return w

def getFormat(map, keys):
	fmt = ""
	for key in keys:
		w = fwidth(map, key)
		w = max(w, len(key))
		fmt = "%s  %%-%d.%ds" % (fmt, w, w)
	return fmt[2:]

class Base(object):
	def __init__(self, rc, type, args):
		self._rc = rc
		self._type = type
		self._doyaml = args.doyaml
		self._sort = args.sort.lower()

	def create(self, args):
		self.do_create(args)

	def delete(self, args):
		self.do_delete(args)

	def list(self):
		print("rc_cli: list not yet implemented on this type.")

	def show(self, args):
		self.do_show(args)

	def do_create(self, args):
		for file in args.args:
			with open(file) as f:
				content = yaml.safe_load(f)
				resp = self._rc.create_of_type(self._type, JSON, content)
				if self._rc._laststatus == 201:
					hdrs = self._rc._lastresponse.headers
					print(hdrs['Location'])
				else:
					print('rc_api: could not create the %s: %s' % (self._type, resp))

	def do_delete(self, args):
		for uuid in args.args:
			resp = self._rc.delete_of_type(self._type, JSON, uuid)
			if self._rc._laststatus != 204 and self._rc._laststatus != 200:
				print('rc_api: could not delete the %s with UUID %s: %s' % (self._type, uuid, resp))

	def do_list(self, cols, titles):
		response = json.loads(self._rc.list_of_type(self._type))
		items = list(response.values())[0]
		if self._doyaml == 'yes':
			cols = cols + ('yaml', )
			titles = titles + ('YAML', )
		fmt = getFormat(items, cols)
		dashtuple = tuple( [DASHES for i in range(len(cols))] )
		print( fmt % titles )
		print( fmt % dashtuple )
		items = sorted(items, key=lambda i: str(i[self._sort]))
		for r in items:
			valtuple = tuple( [r.get(k, '') for k in cols] )
			print( fmt % valtuple )

	def do_show(self, args):
		for uuid in args.args:
			resp = self._rc.show_of_type(self._type, JSON, uuid)
			if self._rc._laststatus != 200:
				print('rc_api: could not show the %s with UUID %s' % (self._type, uuid))
			else:
				print('---')
				js = json.loads(resp)
				yaml.safe_dump(js, sys.stdout, default_flow_style=False)

class Blueprint(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'blueprint', args)

	def list(self):
		self.do_list(('uuid', 'name', 'description', 'version'), ('UUID', 'Name', 'Description', 'Version'))

class Edgesite(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'edgesite', args)

	def list(self):
		self.do_list(('uuid', 'name', 'description'), ('UUID', 'Name', 'Description'))

class Hardware(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'hardware', args)

	def list(self):
		self.do_list(('uuid', 'name', 'description'), ('UUID', 'Name', 'Description'))

class Node(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'node', args)

	def list(self):
		self.do_list(('uuid', 'name', 'description', 'hardware'), ('UUID', 'Name', 'Description', 'Hardware'))

class Pod(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'pod', args)

	def delete(self, args):
		for uuid in args.args:
			# Pass in the "--force" option value
			resp = self._rc.delete_pod(uuid, ctype=JSON, force=args.force)
			if self._rc._laststatus != 202 and self._rc._laststatus != 200:
				print('rc_api: could not delete the POD with UUID %s: %s', (uuid, resp))

	def list(self):
		self.do_list(('uuid', 'name', 'description', 'state', 'blueprint', 'edgesite'),
			('UUID', 'Name', 'Description', 'State', 'Blueprint UUID', 'Edgesite UUID'))

class Region(Base):
	def __init__(self, rc, args):
		Base.__init__(self, rc, 'region', args)

	def list(self):
		self.do_list(('uuid', 'name', 'description', 'parent'), ('UUID', 'Name', 'Description', 'Parent'))


def main():
	parser = argparse.ArgumentParser(description='Perform API calls against a Regional Controller.')
	parser.add_argument('-H', help='the host of the regional controller (default localhost)', dest='host', default='localhost')
	parser.add_argument('-u', help='the username to use (default admin)', dest='user', default='admin')
	parser.add_argument('-p', help='the password to use', dest='password')
	parser.add_argument('-s', help='the field to sort list views by', dest='sort', default='uuid')
	parser.add_argument('-F', help='forcibly delete a POD (use with "pod delete")', action='store_const', dest='force', const=True, default=False)
	parser.add_argument('-Y', help='display YAML columns in the output of list commands', action='store_const', dest='doyaml', const='yes', default='no')
	parser.add_argument('obj', help='The object to manipulate', metavar='obj', choices=OBJS)
	parser.add_argument('op',  help='The operation to perform on the object', metavar='op', choices=OPS)
	parser.add_argument('args', help='Extra arguments for the operation', metavar='args', nargs='*')
	args = parser.parse_args()

	try:
		rc = RCClient.RCClient(server=args.host, login=args.user, password=args.password)
		if args.obj == 'blueprint':
			thing = Blueprint(rc, args)

		elif args.obj == 'edgesite':
			thing = Edgesite(rc, args)

		elif args.obj == 'hardware':
			thing = Hardware(rc, args)

		elif args.obj == 'node':
			thing = Node(rc, args)

		elif args.obj == 'pod':
			thing = Pod(rc, args)

		elif args.obj == 'region':
			thing = Region(rc, args)

		else:
			print('rc_cli: unknown object '+args.obj)
			sys.exit(1)

		if args.op == 'create':
			thing.create(args)

		elif args.op == 'delete':
			thing.delete(args)

		elif args.op == 'list':
			thing.list()

		elif args.op == 'show':
			thing.show(args)

		else:
			print('rc_cli: unknown operation '+args.op)
			sys.exit(1)

	except KeyError as ex:
		if str(ex) == "'x-arc-token'":
			print('rc_cli: login error, did you provide a password?')
			sys.exit(2)
		else:
			print('rc_cli: internal key error')
			sys.exit(3)

	sys.exit(0)

if __name__ == "__main__":
	main()
