#!/usr/bin/python3
#
# Copyright (c) 2019 AT&T Intellectual Property. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#  rc_cli - Command line interface to the Regional Controller.
#  usage: rc_cli [ -H host ] [ -u user ] [ -p passwd ] [ -Y ] object operation [ args ... ]
#     -H host (default localhost)
#     -u user (default admin)
#     -p passwd
#     -Y      (display YAML column in list views)
#

import sys
import argparse
import json
import yaml     # sudo pip install PyYAML
import RCClient

JSON   = RCClient.JSON
DASHES = '-' * 50
OBJS   = [ 'blueprint', 'edgesite', 'hardware', 'node', 'pod', 'region' ]
OPS    = [ 'create', 'delete', 'list', 'show' ]


def fwidth(map, name):
	w = 0
	for i in range(0, len(map)):
		line = map[i]
		w = max(w, len(str(line.get(name, ''))))
	return w

def getFormat(map, keys):
	fmt = ""
	for key in keys:
		w = fwidth(map, key)
		w = max(w, len(key))
		fmt = "%s  %%-%d.%ds" % (fmt, w, w)
	return fmt[2:]

def create_blueprint(rc, args):
	for file in args.args:
		with open(file) as f:
			content = yaml.safe_load(f)
			resp = rc.create_of_type('blueprint', JSON, content)
			if rc._laststatus == 201:
				hdrs = rc._lastresponse.headers
				print(hdrs['Location'])
			else:
				print('rc_api: could not create the blueprint: '+resp)

def create_pod(rc, args):
	for file in args.args:
		with open(file) as f:
			content = yaml.safe_load(f)
			resp = rc.create_of_type('pod', JSON, content)
			if rc._laststatus == 201:
				hdrs = rc._lastresponse.headers
				print(hdrs['Location'])
			else:
				print('rc_api: could not create the POD: '+resp)

def delete_blueprint(rc, args):
	for uuid in args.args:
		resp = rc.delete_of_type('blueprint', JSON, uuid)
		if rc._laststatus != 204:
			print('rc_api: could not delete the blueprint with UUID='+uuid)

def delete_pod(rc, args):
	# Check for --force" option
	for uuid in args.args:
		resp = rc.delete_of_type('pod', JSON, uuid)
		if rc._laststatus != 202 or rc._laststatus != 200:
			print('rc_api: could not delete the POD with UUID='+uuid)

def list_blueprint(rc):
	response = json.loads(rc.list_of_type('blueprint'))
	items = response['blueprints']
	fmt = getFormat(items, ('uuid', 'name', 'description', 'version'))
	print( fmt % ('UUID', 'Name', 'Description', 'Version') )
	print( fmt % (DASHES,DASHES,DASHES,DASHES) )
	for i in range(0, len(items)):
		r = items[i]
		print( fmt % (r['uuid'], r['name'], r.get('description',''), r['version']) )

def list_edgesite(rc):
	response = json.loads(rc.list_of_type('edgesite'))
	items = response['edgesites']
	fmt = getFormat(items, ('uuid', 'name', 'description'))
	print( fmt % ('UUID', 'Name', 'Description') )
	print( fmt % (DASHES,DASHES,DASHES) )
	for i in range(0, len(items)):
		r = items[i]
		print( fmt % (r['uuid'], r['name'], r.get('description','')) )

def list_hardware(rc):
	response = json.loads(rc.list_of_type('hardware'))
	items = response['hardware']
	fmt = getFormat(items, ('uuid', 'name', 'description'))
	print( fmt % ('UUID', 'Name', 'Description') )
	print( fmt % (DASHES,DASHES,DASHES) )
	for i in range(0, len(items)):
		r = items[i]
		print( fmt % (r['uuid'], r['name'], r.get('description','')) )

def list_node(rc, doyaml):
	response = json.loads(rc.list_of_type('node'))
	items = response['nodes']
	cols = ('uuid', 'name', 'description', 'hardware')
	hdrs = ('UUID', 'Name', 'Description', 'Hardware')
	dash = (DASHES,DASHES,DASHES,DASHES)
	if doyaml == 'yes':
		cols = cols + ('yaml', )
		hdrs = hdrs + ('YAML', )
		dash = dash + ('-' * 100, )
	fmt = getFormat(items, cols)
	print( fmt % hdrs )
	print( fmt % dash )
	for i in range(0, len(items)):
		r = items[i]
		if doyaml == 'yes':
			print( fmt % (r['uuid'], r['name'], r.get('description',''), r['hardware'], r['yaml']) )
		else:
			print( fmt % (r['uuid'], r['name'], r.get('description',''), r['hardware']) )

def list_pod(rc):
	response = json.loads(rc.list_of_type('pod'))
	items = response['pods']
	fmt = getFormat(items, ('uuid', 'name', 'description', 'state', 'blueprint', 'edgesite'))
	print( fmt % ('UUID', 'Name', 'Description', 'State', 'Blueprint UUID', 'Edgesite UUID') )
	print( fmt % (DASHES,DASHES,DASHES,DASHES,DASHES,DASHES) )
	for i in range(0, len(items)):
		r = items[i]
		# Note bp_uuid is "blueprint", es_uuid is "edgesite"
		print( fmt % (r['uuid'], r['name'], r.get('description',''), r['state'], r['blueprint'], r['edgesite']) )

def list_region(rc):
	response = json.loads(rc.list_of_type('region'))
	items = response['regions']
	fmt = getFormat(items, ('uuid', 'name', 'description', 'parent'))
	print( fmt % ('UUID', 'Name', 'Description', 'Parent') )
	print( fmt % (DASHES,DASHES,DASHES,DASHES) )
	for i in range(0, len(items)):
		r = items[i]
		print( fmt % (r['uuid'], r['name'], r.get('description',''), r['parent']) )

def show_pod(rc, args):
	for uuid in args.args:
		resp = rc.show_of_type('pod', JSON, uuid)
		if rc._laststatus != 200:
			print('rc_api: could not show the POD with UUID='+uuid)
		else:
			js = json.loads(resp)
			yaml.safe_dump(js, sys.stdout, default_flow_style=False)

def main():
	parser = argparse.ArgumentParser(description='Perform API calls against a Regional Controller.')
	parser.add_argument('-H', help='the host of the regional controller (default localhost)', dest='host', default='localhost')
	parser.add_argument('-u', help='the username to use (default admin)', dest='user', default='admin')
	parser.add_argument('-p', help='the password to use', dest='password')
	parser.add_argument('-Y', help='display YAML columns in the output of list commands', action='store_const', dest='doyaml', const='yes', default='no')
	parser.add_argument('obj', help='The object to manipulate', metavar='obj', choices=OBJS)
	parser.add_argument('op',  help='The operation to perform on the object', metavar='op', choices=OPS)
	parser.add_argument('args', help='Extra arguments for the operation', metavar='args', nargs='*')
	args = parser.parse_args()

	rc = RCClient.RCClient(server=args.host, login=args.user, password=args.password)
	if args.obj == 'blueprint':
		if args.op == 'create':
			create_blueprint(rc, args)
		elif args.op == 'delete':
			delete_blueprint(rc, args)
		elif args.op == 'list':
			list_blueprint(rc)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	elif args.obj == 'edgesite':
		if args.op == 'list':
			list_edgesite(rc)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	elif args.obj == 'hardware':
		if args.op == 'list':
			list_hardware(rc)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	elif args.obj == 'node':
		if args.op == 'list':
			list_node(rc, args.doyaml)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	elif args.obj == 'pod':
		if args.op == 'create':
			create_pod(rc, args)
		elif args.op == 'delete':
			delete_pod(rc, args)
		elif args.op == 'list':
			list_pod(rc)
		elif args.op == 'show':
			show_pod(rc, args)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	elif args.obj == 'region':
		if args.op == 'list':
			list_region(rc)
		else:
			print("rc_cli: %s %s not yet implemented." % (args.obj, args.op))

	else:
		print('rc_cli: unknown object '+args.obj)
		sys.exit(1)

	sys.exit(0)

if __name__ == "__main__":
	main()
